import torch
import torch.nn as nn
from torch.nn import functional as F
from torch.nn import init

# Chinese version intro:
# https://blog.csdn.net/tMb8Z9Vdm66wH68VX1/article/details/136359589

# Basiclly this arch is based on Makemore Arch and replaced Forword Network with SparseMoE.
# Beside, Noisy Top K Gate and Top K Gate.

# OVERALL STRUCTURE
#  ____________________      ______                            ________         ________
# |                    |    |      |   /----> |Expert 1|----> |        |       |        |
# |Multi-Head Attention| -> |Router|--------> |Expert 2|----> | Weight | ----> | Output |
# |____________________|    |______|   \----> |Expert 3|----> |________|       |________|
#                              :                    :
#                              :....................:
#

# hyperparameters used in MHA and MoE Sparse Module.
batch_size = 16 # how many independent sequences will we process in parallel?
block_size = 32 # What is your longest predict?
max_iters = 5000 # Maximum number of training iterations.
eval_interval = 100 # Evaluate the model after iterate this number
learning_rate = 1e-3 # Your evil optimizer lol.
device = 'cuda' if torch.cuda.is_available() else 'cpu' # Damn of course you know which device to use.
eval_iters = 400 # How many iter in your eval.
head_size = 16
n_embed = 128
n_head = 8
n_layer = 8
dropout = 0.1
num_experts = 8 # The number of experts
top_k = 2 # This para controls the number of active parameter

torch.manual_seed(1337) # SO AFTER YOU SET SEED YOU COULD SET DOWN YOUR RANDOM NUMBER!!!

# So we need to read the scripts
with open('input.txt', 'r', encoding='utf-8') as f:
    text = f.read()

# I have to remind you The set() function creates
# an unordered set of non-repeating elements.
# The chars is all alphabet occured in text.
chars = sorted(list(set(text)))
# How many alphabets did text use?
vocab_size = len(chars)

# Creating map that mapping char to i
stoi = {ch:i for i,ch in enumerate(chars)}
# Creating map that mapping i to char
itos = {i:ch for i,ch in enumerate(chars)}
encode = lambda s:[stoi[c] for c in s] # encoder: string -> list(int)
decode = lambda l:''.join([itos[i] for i in l]) # decoder: list(int) -> string

# Train and test split
data = torch.tensor(encode(text), dtype=torch.long) # The whole text into list of int
n = int(0.9*len(data))
train_data = data[:n]
val_data = data[n:]

"""
  Typical Transformer models is kinda like:

  torch.manual_seed(1337)
  B, T, C = 4, 8, 32 # Batch, Time, Channels
  x = torch.randn(B, T, C)

  head_size = 16
  key = nn.Linear(C, head_size, bias = False)
  query = nn.Linear(C, head_size, bias = False)
  value = nn.Linear(C, head_size, bias = False)

  k = key(x) # (B, T, 16)
  q = query (x) # (B, T, 16)   
  wei = k @ q.transpose(-2,-1) #(B,T,16) & (B,16,T) --> (B, T, T)
  tril = torch.tril(torch.ones(T, T))
  wei = masked_fill(tril == 0, float('-inf'))
  wei = softmax(wei, dim = -1) BTT

  v = value(x) # B,T,H
  out = wei @ v
  out.shape() #4, 8, 16

"""

def get_batch(split:str)->torch.Tensor:
    """
    (Generated by Claude3)

    这段代码定义了一个名为 `get_batch` 的函数,它用于从训练或验证数据中获取一个批次的输入和标签.

    输入:split(字符串): 指定是从训练数据(`'train'`)还是验证数据(`'val'`)中获取批次。
    Input(split)

    1. `data = train_data if split == 'train' else val_data`
    - 根据`split`的值,从`train_data`或`val_data`中选择一个作为`data`。

    2. `ix = torch.randint(len(data) - block_size, (batch_size,))`
    - 从`data`中随机选择`batch_size`个起始索引,这些索引的范围是`[0, len(data) - block_size]`。

    3. `x = torch.stack([data[i:i+block_size] for i in ix])`
    - 对于每个起始索引`i`,从`data`中获取长度为`block_size`的序列作为输入`x`的一个样本。
    - `x`最终形状为`(batch_size, block_size)`。

    4. `y = torch.stack([data[i+1:i+block_size+1] for i in ix])`
    - 对于每个起始索引`i`,从`data`中获取长度为`block_size`的序列作为标签`y`的一个样本,与输入`x`相比向右移动了一个位置。
    - `y`最终形状为`(batch_size, block_size)`。

    5. `x, y = x.to(device), y.to(device)`
    - 将`x`和`y`移动到指定的设备(CPU或GPU)上。

    输出:
    - `x`(张量): 输入数据,形状为`(batch_size, block_size)`。
    - `y`(张量): 标签数据,形状为`(batch_size, block_size)`。

    总的来说,这个函数从训练或验证数据中随机抽取`batch_size`个长度为`block_size`的序列作为输入`x`,并将相邻的序列作为标签`y`。
    它常用于语言模型的训练,其中输入`x`用于预测下一个词或字符`y`。
    """
    data = train_data if split == 'train' else val_data
    ix = torch.randint(len(data) - block_size, (batch_size,))
    x = torch.stack([data[i:i+block_size] for i in ix])
    y = torch.stack([data[i+1:i+block_size+1] for i in ix])
    x, y = x.to(device), y.to(device)
    return x,y

@torch.no_grad()
def estimate_loss(model):
    out = {}
    model.eval() # EVAL MODE : ON!
    for split in ['train', 'val']:
        losses = torch.zeros(eval_iters) # Set-zeros for losses
        for k in range(eval_iters):
            X, Y = get_batch(split)
            logits, loss = model(X,Y) # Compute the loss : Model.X -> logits, Model.Y -> loss
            losses[k] = loss.item()
            # Remember, item() function:
            # x = torch.tensor([[1]])
            # >>> tensor({[[1]])
            # x.item()
            # >>> 1
        out[split] = losses.mean() # Compute losses's mean value.
    model.train() # Continual training TRAIN MODE : ON!
    return out

class Head(nn.Module):
    def __init__(self, head_size):
        super().__init__()

        # enlarge the dim of n_embeds into head_size.
        self.key = nn.Linear(n_embed, head_size, bias=False)
        self.query = nn.Linear(n_embed, head_size, bias=False)
        self.value = nn.Linear(n_embed, head_size, bias=False)

        # torch.tril:2D Tensor's lower triangle
        # torch.triu:2D Tensor's upper triangle
        self.register_buffer('tril', torch.tril(torch.ones(block_size, block_size)))
        self.dropout = nn.Dropout(dropout)
    
    # Let Claude3 explain every line.
    def forward(self, x):
        B,T,C = x.shape # Batch, Timesteps, Channel
        k = self.key(x) #(B,T,C)
        q = self.query(x) #(B,T,C)
        wei = q @ k.transpose(-2,-1) * C**-0.5
        wei = wei.masked_fill(self.tril[:T,:T] == 0, float('-inf'))
        wei = F.softmax(wei,dim=-1)
        wei = self.dropout(wei)
        v = self.value(x)
        out = wei @ v
        return out

class MultiHeadAttention(nn.Module):
    def __init__(self, num_heads, head_size):
        super().__init__()
        # What is difference between ModuleList and Sequential?
        # Generated by Claude3:
        # Module Ordering:

        #     Sequential enforces a strict order for the modules it contains. The forward pass of a Sequential module applies the modules in the order they were added.
        #     ModuleList does not enforce any order. The modules in a ModuleList are simply stored as a list, and you need to manually apply them in the desired order during the forward pass.

        # Input/Output Behavior:

        #     In Sequential, the output of one module is automatically passed as the input to the next module in the sequence.
        #     In ModuleList, you need to manage the input and output of each module manually, as there is no implicit connection between the modules.

        self.heads = nn.ModuleList([Head(head_size) for _ in range(num_heads)])
        self.proj = nn.Linear(n_embed, n_embed)
        self.dropout = nn.Dropout(dropout)
        
    def forward(self,x):
        out = torch.cat([h(x) for h in self.heads], dim = -1)
        out = self.dropout(self.proj(out))
        return out

# Expert Module 
#             ________          ______          ________          _________
#            |        |  x 4   |      |  / 4   |        |        |         |
#  n_embd -> | Linear | -----> | ReLU | -----> | Linear | -----> | dropout | ----->
#            |________|        |______|        |________|        |_________|

class Expert(nn.Module):
    """
    Expert is a Linear layer with non-lineariy
    Pourquoi?
    """
    def __init__(self, n_embed):
        super().__init__()
        self.net = nn.Sequential(
            nn.Linear(n_embed, 4 * n_embed),
            nn.ReLU(),
            nn.Linear(4 * n_embed, n_embed),
            nn.Dropout(dropout),
        )
        
    def forward(self, x):
        return self.net(x)
    
#  ____________                      _______________              _____                  _______________
# |            |   Linear Layer     |               |            |     |    softmax     |               |
# | MHA output | ---------------->  | Output tensor | ---------> |  T  | -------------> | Router/Gating |
# |____________|                    |_______________|            |_____|                |_______________|
#       :                                  :                        :                           :
#   (B ,T, C)                       (B, T, N_Experts)               :                           :
#                                                                   :                     Output : sparse tensor with top k element
#                                                     / Keep the Top K in last Dim, \               along last dimension populated
#                                                     \       Zero out of rest      /
"""
# Understanding how gating work:

num_expert = 4
top_k = 2
n_embed = 32

# Example multi-head attention output for a simple illustative example,
# consider n_embed = 32, context_length = 4, and batch_size = 2

topkgate_linear = nn.Linear(n_embed, num_experts) # nn.Linear(32, 4)

logits = topkgate_linear(mh_output)
top_k_logits, top_k_indices = logits.topk(top_k, dim = -1)

"""
class NoisyTopKRouter(nn.Module):
    def __init__(self, n_embed, num_experts, top_k):
        super(NoisyTopKRouter, self).__init__()
        self.top_k = top_k # I guess probably is 2.
        # Linear x -> X
        self.topkroute_linear = nn.Linear(n_embed, num_experts)
        self.noise_linear = nn.Linear(n_embed, num_experts)

    def forward(self, mh_output):
        # mh_output : Multi-head block's output
        logits = self.topkroute_linear(mh_output) # linear_layer

        # Noise logits
        noise_logits = self.noise_linear(mh_output) # linear_layer

        # Add scaled unit gaussian noise to logits
        # noise is a tensor with the same shape with logits
        # F.softplus is an Activation Function
        noise = torch.randn_like(logits)*F.softplus(noise_logits)
        noisy_logits = logits + noise # Then we have a noise tensor have num_expert shape.

        # Load !
        # This line used topk func() to obatin the max logits-value and indice
        top_k_logits, indices = noisy_logits.topk(self.top_k, dim = -1)
        zeros = torch.full_like(noisy_logits,float('-inf'))
        # scatter(dim, index, src) : Put the src's value into tensor by index
        # Now that tensor have num_experts shape but only have two max k value.
        sparse_logits = zeros.scatter(-1, indices, top_k_logits)
        router_output = F.softmax(sparse_logits, dim=-1)
        return router_output, indices

# From CSDN BLOG
# 在稀疏混合专家架构中，每个 transformer 区块内的自注意力机制保持不变。
# 不过，每个区块的结构发生了巨大的变化：标准的前馈神经网络被多个稀疏激活的前馈网络（即专家网络）所取代。
# 所谓「稀疏激活」，是指序列中的每个 token 只被分配给有限数量的专家（通常是一个或两个）。

# From Claude3
# 在稀疏混合专家(Sparse Mixture of Experts, MoE)架构中:

# 1. 确实,每个token会被分配给一到两个专家(experts),这些专家是通过一个路由网络(Router)和TopK机制选择的。

# 具体来说:
# - 首先有一个路由网络,它会根据token的表示(embedding)为每个专家生成一个路由分数(routing score)。
# - 然后使用TopK操作,选择路由分数最高的K个专家。通常K=1或K=2。
# - 最终,每个token的输入只会被传递给这K个专家进行计算。

# 2. 如果使用标准的前馈神经网络(FFN),那么每个token的输入都会被传递给所有的FFN进行计算。

# 这正是MoE架构与标准Transformer的区别所在:

# - 在标准Transformer中,前馈子层是一个完全密集连接的FFN,每个token的输入都会计算整个FFN。
# - 而在MoE中,前馈子层是由多个专家FFN组成的,每个token只会选择性地传递给其中的1-2个专家FFN进行计算。

# 通过这种稀疏激活机制,MoE可以使用更大更强大的专家FFN,同时避免计算整个大型FFN所需的巨大计算成本。这使得MoE架构能够在相同的计算预算下,比标准Transformer获得更好的性能。

class SparseMoE(nn.Module):
    def __init__(self, n_embed, num_experts, top_k, capacity_factor=1.0):
        super(SparseMoE, self).__init__()
        self.router = NoisyTopKRouter(n_embed, num_experts, top_k)
        self.experts = nn.ModuleList([Expert(n_embed) for _ in range(num_experts)])
        self.top_k = top_k
        self.capacity_factor = capacity_factor
        self.num_experts = num_experts
    
    def forward(self, x):
        # Assuming x's shape is batch_size,seq_len and n_embd.
        batch_size, seq_len, _ = x.shape
        gating_output, indices = self.router(x)
        final_output = torch.zeros_like(x)
        
        # Flatten the batch and sequence dimensions to treat each token independently
        flat_x = x.view(-1, x.size(-1))
        flat_gating_output = gating_output.view(-1, gating_output.size(-1))
        
        tokens_per_batch = batch_size * seq_len * self.top_k
        expert_capacity = int((tokens_per_batch / self.num_experts) * self.capacity_factor)
        
        updates = torch.zeros_like(flat_x)
        
        for i,expert in enumerate(self.experts):
            expert_mask = (indices == i).any(dim=-1)
            flat_mask = expert_mask.view(-1)
            selected_indices = torch.nonzero(flat_mask).squeeze(-1)
            # numel(): Return the total number of elements in the tensor.
            limited_indices = selected_indices[:expert_capacity] if selected_indices.numel() > expert_capacity else selected_indices
            if limited_indices.numel() > 0:
                expert_input = flat_x[limited_indices]
                expert_output = expert(expert_input)
                gating_scores = flat_gating_output[limited_indices, i].unsqueeze(1)
                weighted_output = expert_output * gating_scores
                # index_add_(dim,  index,  tensor) → Tensor
                updates.index_add(0, limited_indices, weighted_output)
        
        final_output += updates.view(batch_size, seq_len, -1)
        return final_output

class Block(nn.Module):
    def __init__(self, n_embed, n_head, num_experts, top_k):
        # n_embed = embedding dimension
        # n_head = the number of heads
        super().__init__()
        head_size = n_embed // n_head
        self.sa = MultiHeadAttention(n_head, head_size)
        self.smoe = SparseMoE(n_embed, num_experts, top_k)
        
        # Pourquoi utilise-t-il LayerNorm ici?
        self.ln1 = nn.LayerNorm(n_embed)
        self.ln2 = nn.LayerNorm(n_embed)
        
    def forward(self,x):
        x = x + self.sa(self.ln1(x))
        x = x + self.smoe(self.ln2(x))
        return x

# SO FINALLY WE COME TO HERE!!!!!!!
class SparseMoELanguageModel(nn.Module):
    def __init__(self):
        super().__init__()
        # torch.nn.Embedding(num_embeddings, embedding_dim, padding_idx=None,
        # max_norm=None,  norm_type=2.0,   scale_grad_by_freq=False, 
        # sparse=False,  _weight=None)
        self.token_embedding_table = nn.Embedding(vocab_size, n_embed)
        self.position_embedding_table = nn.Embedding(block_size,n_embed)
        # Prepare 8 blocks in Sequential
        self.blocks = nn.Sequential(*[Block(n_embed,n_head,num_experts,top_k) for _ in range(n_layer)])
        # Final layer norm
        self.ln_f = nn.LayerNorm(n_embed)
        self.lm_head = nn.Linear(n_embed, vocab_size)
        
    def forward(self, idx, targets = None):
        B, T = idx.shape # Batch_size, Timestamp
        tok_emb = self.token_embedding_table(idx) # B, T, C
        pos_emb = self.position_embedding_table(torch.arange(T,device=device))  # T, C
        x = tok_emb + pos_emb
        x = self.blocks(x)
        x = self.ln_f(x)
        logits = self.lm_head(x)
        
        if targets is None:
            loss = None
        else:
            B, T, C = logits.shape
            logits = logits.view(B*T,C)
            targets = targets.view(B*T)
            loss = F.cross_entropy(logits, targets)
        return logits, loss
    
    def generate(self, idx, max_new_tokens):
        # idx is (B, T) array
        for _ in range(max_new_tokens):
            # Crop the last block_size token
            idx_cond = idx[:, -block_size:]
            # get the predictions
            logits, loss = self(idx_cond)
            # Focus only on last time step
            logits = logits[:,-1,:]
            # get prob
            probs = F.softmax(logits, dim = -1)
            # Sample from the distribution
            
            # torch.multinomial(input, num_samples)
            idx_next = torch.multinomial(probs, num_samples=1)
            idx = torch.cat((idx, idx_next), dim=1)
            return idx
        
def kaiming_init_weights(m):
    if isinstance(m,(nn.Linear)):
        init.kaiming_normal_(m.weight)
    
def main():
    model = SparseMoELanguageModel()
    model.apply(kaiming_init_weights)
    model = model.to(device)
    print(sum(p.numel() for p in model.parameters()) / 1e6, 'M parameters')
    optimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate)
    
    m = model.to(device)
    print(sum(p.numel() for p in m.parameters()) / 1e6, 'M parameters')
    optimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate)
    
    for iter in range(max_iters):
        if iter % eval_interval == 0 or iter == max_iters - 1:
            losses = estimate_loss(model)
            print(f"step {iter}: train loss {losses['train']:.4f}, val loss {losses['val']:.4f}")
        
        # sample a batch of data
        xb, yb = get_batch('train')
        
        logits, loss = model(xb, yb)
        optimizer.zero_grad(set_to_none=True)
        loss.backward()
        optimizer.step()
    
    if __name__ == "__main__":
        main()
    
            